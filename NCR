#include <bits/stdc++.h>
using namespace std;
using namespace chrono;
#define fastio() ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define endl "\n"
#define pb emplace_back
#define ff first
#define ss second
#define all(p) p.begin(), p.end()
#define ll long long int //use replace I with i
#define sz(x) ((int)(x).size())
#define setbits(x) __builtin_popcountll(x)
#define For(i, a, b) for (int i = a; i < b; i++)

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << #x << " " << x; \
    cerr << endl;           \
    //_print(x);         \
    cerr << endl;
#else
#define debug(x)
#endif

typedef unsigned long long ull;
typedef long double lld;
const ll mod = 998244353;
const lld eps = 1e-9;
const ll maxn = 1e5 + 10;
const ll inf = 5e18;
const ll minf = -inf;

ll fac[maxn];
void comp()
{
    fac[0] = 1;
    for (ll i = 1; i < maxn; i++)
        fac[i] = (fac[i - 1] * i) % mod;
}
ll power(ll x, ll y, ll p = mod)
{
    ll res = 1;
    x = x % p;
    while (y > 0)
    {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}
ll modInverse(ll n, ll p = mod)
{
    return power(n, p - 2, p);
}
//this is the method which requires the argument to calculate ncr, it O(logN) complexity
ll NCR(ll n, ll r, ll p = mod)
{
    if (n < r)
        return 0;
    if (r == 0 || r == n)
        return 1;
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
}
void solve()
{
    ll n,cnt=0;
    string str, ne_str="";
    cin >> n>>str;
    ll cnt1 = 0, cnt0 = 0;
    for (ll i = 0; i < n; i++)
    {
        if(str[i]=='0')
            cnt0++;
        else{
            if(i+1<n && str[i+1]=='1'){
                cnt1++;
                i++;
            }
        }
    }
    debug(cnt0);
    debug(cnt1);
    ll ans = NCR(cnt1 + cnt0, cnt0);
    cout << ans << endl;
}
signed main()
{

#ifndef ONLINE_JUDGE
    freopen("input.txt",
            "r", stdin);
    freopen("output.txt",
            "w", stdout);
    freopen("error.txt", "w", stderr);
#endif

    
    comp();
    cout<<NCR(13,5)<<endl;
    cout<<NCR(5,2)<<endl;
    cerr << "\nTime elapsed : " << 1000 * clock() / CLOCKS_PER_SEC << " ms\n";
    return 0;
}
